name: Build & Test

on: [push, pull_request]

jobs:
  job:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - name: "Windows latest (MSVC)"
            os: windows-latest
            cxx: 'cl'
            cmake_flags: ''

          - name: "Windows latest (MinGW)"
            os: windows-latest
            cxx: 'g++'
            cmake_flags: ''
        
          - name: "Ubuntu latest (gcc)"
            os: ubuntu-latest
            cxx: 'g++'
            cmake_flags: '-- -k -j4'

          - name: "Ubuntu latest (clang)"
            os: ubuntu-latest
            cxx: 'clang++'
            cmake_flags: '-- -k -j4'

          - name: "macOS latest (clang)"
            os: macos-latest
            cxx: 'clang++'
            cmake_flags: '-- -k -j4'

    steps:
      - uses: lukka/get-cmake@latest
      - uses: actions/checkout@v1
        with:
          submodules: true

      - name: Install lcov (brew)
        if: "contains(matrix.config.os, 'macos')"
        run: brew install lcov
        shell: bash

      - name: Install lcov (apt)
        if: "contains(matrix.config.os, 'ubuntu')"
        run: sudo apt-get install lcov
        shell: bash

      - name: Configure & Build
        uses: lukka/run-cmake@v3
        with:
          cmakeBuildType: 'Release'
          cmakeGenerator: 'UnixMakefiles'
          cmakeListsOrSettingsJson: 'CMakeListsTxtAdvanced'
          cmakeAppendedArgs: >-
            -DCMAKE_CXX_COMPILER=${{ matrix.config.cxx }}
            -DCODE_COVERAGE=ON
            -DCACHE_BUILD_TESTS=ON
            -DCACHE_BUILD_EXAMPLES=ON
          buildWithCMakeArgs: '--config Release ${{ matrix.config.cmake_flags }}'
          buildDirectory: '${{ runner.workspace }}/build/'

      - name: Run tests
        working-directory: ${{ runner.workspace }}/build
        run: ctest -V -C Release
        shell: bash

      - name: Create coverage report (LLVM)
        if: "!contains(matrix.config.os, 'windows') && contains(matrix.config.cxx, 'clang++-11')"
        working-directory: ${{ runner.workspace }}/build
        run: |
          echo "#!/bin/bash" > llvm-gcov.sh
          echo "exec llvm-cov-11 gcov \"\$@\"" >> llvm-gcov.sh
          chmod +x llvm-gcov.sh
          lcov --directory . --capture --gcov-tool "${{ runner.workspace }}/build/llvm-gcov.sh" --output-file coverage.info
          lcov --remove coverage.info '/usr/*' '*/deps/*' --output-file coverage.info
        shell: bash

      - name: Create coverage report (GCC)
        if: "!contains(matrix.config.os, 'windows') && !contains(matrix.config.cxx, 'clang++-11')"
        working-directory: ${{ runner.workspace }}/build
        run: |
          lcov --directory . --capture --output-file coverage.info
          lcov --remove coverage.info '/usr/*' '*/deps/*' --output-file coverage.info
        shell: bash

      - name: Upload coverage to Codecov
        if: "!contains(matrix.config.os, 'windows')"
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ${{ runner.workspace }}/build/coverage.info
          flags: unittests
          name: ${{ matrix.config.name }}
          fail_ci_if_error: false
          verbose: false
